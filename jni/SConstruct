# Copyright_License {
#
#  G-Meter INU.
#  Copyright (C) 2013-2014 Peter F Bradshaw
#  A detailed list of copyright holders can be found in the file "AUTHORS".
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#}

import os

topdir = '../'
topsrcdir = topdir + 'jni/'

env     = Environment(ENV = os.environ)
verbose = ARGUMENTS.get('verbose', 'n')
debug   = ARGUMENTS.get('debug', 'y')
target  = ARGUMENTS.get('target', 'UNIX32')

# NOTE: Be prepared to update these two following variables on every release
# of the NDK.
current_ndk = '~/opt/android-ndk-r8d/'
ndk_bin = 'toolchains/arm-linux-androideabi-4.7/prebuilt/linux-x86/bin/'

native_target_cxx = os.popen('which g++').read()
targetmap    = { 'UNIX32'   : 'Unix',
                 'ANDROID7' : 'Android' }
targetdefine = { 'UNIX32'   : '-DUNIX',
                 'ANDROID7' : '-DANDROID' }
cxx          = { 'UNIX32'   : 'g++',
                 'ANDROID7' : current_ndk + ndk_bin +
                              'arm-linux-androideabi-g++' }
cxxflags     = { 'UNIX32'   : '',
                 'ANDROID7' : '--sysroot ' + current_ndk + 'platforms/android-14/arch-arm ' +
                              '-isystem ' + current_ndk + 'sources/cxx-stl/gnu-libstdc++/4.7/include ' +
                              '-isystem ' + current_ndk + 'sources/cxx-stl/gnu-libstdc++/4.7/libs/armeabi-v7a/include' }
libpath      = { 'UNIX32'   : '',
                 'ANDROID7' :current_ndk + 'platforms/android-14/arch-arm/usr/lib' }
linkflags    = { 'UNIX32'   : '',
                 'ANDROID7' : '--sysroot ' + current_ndk + 'platforms/android-14/arch-arm' }
targetdst    = 'build/' + target + '/'

env.Append(CXXFLAGS = '-std=gnu++11 -I./ ' +
                      '-ffast-math  -fno-exceptions -fno-rtti ' +
                      '-fno-threadsafe-statics -fmerge-all-constants ' +
                      '-fconserve-space -fno-operator-names ' +
                      '-fvisibility=hidden -finput-charset=utf-8 ' +
                      '-Wall -Wextra -Wwrite-strings -Wcast-qual ' +
                      '-Wpointer-arith -Wsign-compare -Wundef ' +
                      '-Wmissing-declarations -Wmissing-noreturn ' +
                      '-Wno-unused-parameter -Wno-missing-field-initializers '
                      '-Wcast-align -Werror ')

if debug == 'n':
    env.Append(CXXFLAGS = '-O2')
else:
    env.Append(CXXFLAGS = '-g -O0')

if verbose == 'n':
    env['CXXCOMSTR']    = 'Compiling $TARGET'
    env['SHCXXCOMSTR']  = 'Compiling $TARGET'
    env['CCCOMSTR']     = 'Compiling $TARGET'
    env['LINKCOMSTR']   = 'Linking $TARGET'
    env['SHLINKCOMSTR'] = 'Linking $TARGET'
    env['ARCOMSTR']     = 'Archiving $TARGET'
    env['CPPCOMSTR']    = 'Processing $TARGET'
    env['PERLCOMSTR']   = 'Generating $TARGET'
    env['JAVAHCOMSTR']  = 'Generating $TARGET'
    env['JAVACOMSTR']   = 'Compiling $TARGET'

env.Append(CXXFLAGS = targetdefine[target])
env['CXX'] = cxx[target]
env.Append(CXXFLAGS = cxxflags[target])
env['LIBPATH'] = libpath[target]
env['LINKFLAGS'] = linkflags[target]

githash = os.popen('git rev-parse --short --verify HEAD 2>/dev/null').read()
version = os.popen('cat ' + topdir + 'VERSION.txt').read()

Export('env')

print "Build target " + target
env.SConscript('./SConscript', variant_dir = targetdst, duplicate = 0)
